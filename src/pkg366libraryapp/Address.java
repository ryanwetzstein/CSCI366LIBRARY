package pkg366libraryapp;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author Daniel Putnam
 */
public class Address {

    private int address_id;
    private String street;
    private String city;
    private String zipcode;
    private String state;
    private String country;

    //Full Constructor
    public Address(int address_id, String street, String city, String zipcode, String state, String country) {
        this.address_id = address_id;
        this.street = street;
        this.city = city;
        this.zipcode = zipcode;
        this.state = state;
        this.country = country;
    }

    //Constructor without autogenerated stuff
    public Address(String street, String city, String state, String zipcode, String country) {
        this.street = street;
        this.city = city;
        this.zipcode = zipcode;
        this.state = state;
        this.country = country;
    }

    public static int insert(Address a) throws SQLException {
        String query = "INSERT INTO Address (street, city, zipcode, state, country) VALUES (?, ?, ?, ?, ?)";

        PreparedStatement pstmt = DatabaseManager.getConnection().prepareStatement(query);

        pstmt.setString(1, a.street);
        pstmt.setString(2, a.city);
        pstmt.setString(3, a.zipcode);
        pstmt.setString(4, a.state);
        pstmt.setString(5, a.country);

        int count = pstmt.executeUpdate();

        return count;
    }

    public static int updateAddress(int aID, String column, String change) throws SQLException {
        String query = "UPDATE Address SET " + column + " = ? WHERE address_id = ?";

        PreparedStatement pstmt = DatabaseManager.getConnection().prepareStatement(query);
        pstmt.setString(1, change);
        pstmt.setInt(2, aID);

        int count = pstmt.executeUpdate();

        return count;
    }

    public static int removeAddress(int aID) throws SQLException {
        String query = "DELETE FROM Address WHERE address_id = ?";

        PreparedStatement pstmt = DatabaseManager.getConnection().prepareStatement(query);
        pstmt.setInt(1, aID);

        int count = pstmt.executeUpdate();

        return count;
    }

    public static ArrayList<Address> ListAddresses(boolean print) throws SQLException {
        ArrayList<Address> addresses = new ArrayList<>();
        String query = "SELECT * FROM Address ORDER By address_id asc";

        PreparedStatement pstmtSelect = DatabaseManager.getConnection().prepareStatement(query);

        ResultSet rs = pstmtSelect.executeQuery();

        while (rs.next()) {
            int address_id = rs.getInt("address_id");
            String street = rs.getString("street");
            String city = rs.getString("city");
            String zipcode = rs.getString("zipcode");
            String state = rs.getString("state");
            String country = rs.getString("country");

            addresses.add(new Address(address_id, street, city, zipcode, state, country));
            if (print) {
                System.out.println("ID: " + address_id
                        + "\nStreet: " + street
                        + "\nCity: " + city
                        + "\nState: " + state
                        + "\nZipCode: " + zipcode
                        + "\nCountry " + country);
            }
        }
        return addresses;
    }

    //string condition
    public static ArrayList<Address> ListAddresses(String column, String condition, boolean print) throws SQLException {
        ArrayList<Address> addresses = new ArrayList<>();
        String query = "SELECT * FROM Address WHERE " + column + " = ? ORDER By address_id asc";

        PreparedStatement pstmtSelect = DatabaseManager.getConnection().prepareStatement(query);
        pstmtSelect.setString(1, condition);

        ResultSet rs = pstmtSelect.executeQuery();

        while (rs.next()) {
            int address_id = rs.getInt("address_id");
            String street = rs.getString("street");
            String city = rs.getString("city");
            String zipcode = rs.getString("zipcode");
            String state = rs.getString("state");
            String country = rs.getString("country");

            addresses.add(new Address(address_id, street, city, zipcode, state, country));
            if (print) {
                System.out.println("ID: " + address_id
                        + "\nStreet: " + street
                        + "\nCity: " + city
                        + "\nState: " + state
                        + "\nZipCode: " + zipcode
                        + "\nCountry " + country);
            }
        }
        return addresses;
    }
    
    //int condition
    public static ArrayList<Address> ListAddresses(String column, int condition, boolean print) throws SQLException {
        ArrayList<Address> addresses = new ArrayList<>();
        String query = "SELECT * FROM Address WHERE " + column + " = ? ORDER By address_id asc";

        PreparedStatement pstmtSelect = DatabaseManager.getConnection().prepareStatement(query);
        pstmtSelect.setInt(1, condition);

        ResultSet rs = pstmtSelect.executeQuery();

        while (rs.next()) {
            int address_id = rs.getInt("address_id");
            String street = rs.getString("street");
            String city = rs.getString("city");
            String zipcode = rs.getString("zipcode");
            String state = rs.getString("state");
            String country = rs.getString("country");

            addresses.add(new Address(address_id, street, city, zipcode, state, country));
            if (print) {
                System.out.println("ID: " + address_id
                        + "\nStreet: " + street
                        + "\nCity: " + city
                        + "\nState: " + state
                        + "\nZipCode: " + zipcode
                        + "\nCountry " + country);
            }
        }
        return addresses;
    }

    public static int registerAddress() {

        Scanner scan = new Scanner(System.in);

        System.out.println("Enter a street: ");
        String street = scan.next();

        System.out.println("Enter a city: ");
        String city = scan.next();

        System.out.println("Enter a state: ");
        String state = scan.next();

        System.out.println("Enter a zipcode: ");
        String zipcode = scan.next();

        System.out.println("Enter a country: ");
        String country = scan.next();

        try {
            insert(new Address(street, city, state, zipcode, country));
            
            String query = "SELECT max(address_id) FROM Address";
            PreparedStatement pstmtSelect = DatabaseManager.getConnection().prepareStatement(query);
            ResultSet rs = pstmtSelect.executeQuery();
            rs.next();
            return rs.getInt("max");
                    
        } catch (SQLException e) {
            System.out.println("Got a SQL exception.");
            e.printStackTrace();
        }
        return -1;
    }

}
